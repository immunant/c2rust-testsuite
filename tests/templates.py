import os
import stat

from tests.util import *
from jinja2 import Template

TRANSPILE_SH: str = r"""#!/usr/bin/env bash
# this file was autogenerated by templates.py
set -e; set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0" )" && pwd)"

RUST_BACKTRACE=1 c2rust transpile \
    --output-dir "$SCRIPT_DIR/repo" {{main}} \
    {{tflags}} ${EXTRA_TFLAGS:---overwrite-existing} \
    compile_commands.json \
    -- {{cflags}} ${EXTRA_CFLAGS:--w} \
     2>&1 | tee `basename "$0"`.log

if [[ -f "$SCRIPT_DIR/build.rs" ]]; then
    cp "$SCRIPT_DIR/build.rs" "$SCRIPT_DIR/repo"
fi
"""

CARGO_SH: str = r"""#!/usr/bin/env bash
# this file was autogenerated by templates.py
set -e; set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0" )" && pwd)"

(cd "$SCRIPT_DIR/repo" && cargo build 2>&1 | tee ../`basename "$0"`.log)
"""


def render_script(template: str, out_path: str, params: dict):
    out = Template(template).render(**params)

    with open(out_path, 'w') as fh:
        fh.writelines(out)
    os.chmod(out_path, stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC)


def autogen_cargo(conf_file, yaml: dict):
    transpile = yaml.get("cargo")
    if transpile:
        params = {}

        out_path = os.path.join(
            os.path.dirname(conf_file),
            "cargo.gen.sh"
        )
        render_script(CARGO_SH, out_path, params)


def autogen_transpile(conf_file, yaml: dict):
    transpile = yaml.get("transpile")
    if transpile:
        params = {"main": "--emit-build-files", "cflags": ""}

        if isinstance(transpile, dict):
            main = transpile.get("main")
            if main:
                params["main"] = f"--main {main}"

            cflags = transpile.get("cflags")
            if cflags:
                if isinstance(cflags, list):
                    cflags = " ".join(cflags)
                params["cflags"] = cflags
        else:  # else we should have `transpile: true`
            assert isinstance(transpile, bool) and transpile

        out_path = os.path.join(
            os.path.dirname(conf_file),
            "transpile.gen.sh"
        )
        render_script(TRANSPILE_SH, out_path, params)


def autogen(conf: Config):
    for (cf, yaml) in conf.project_conf.items():
        autogen_transpile(cf, yaml)
        autogen_cargo(cf, yaml)
