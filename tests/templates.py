import os
import stat
from collections.abc import Mapping
from typing import Any, Dict, List

from tests.util import *
from jinja2 import Template

TRANSPILE_SH: str = r"""#!/usr/bin/env bash
# this file was autogenerated by templates.py
set -e; set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0" )" && pwd)"

RUSTFLAGS="-Awarnings {{extra_rustflags}}" \
RUST_BACKTRACE=1 \
c2rust transpile \
    --output-dir "$SCRIPT_DIR/repo" {{binary}} \
    {{tflags}} ${EXTRA_TFLAGS:---overwrite-existing} \
    compile_commands.json \
    -- {{cflags}} ${EXTRA_CFLAGS:--w} \
     2>&1 | tee `basename "$0"`.log

for build_file in build.rs Cargo.toml
do
    if [[ -f "$SCRIPT_DIR/$build_file" ]]; then
        cp "$SCRIPT_DIR/$build_file" "$SCRIPT_DIR/repo/"
    fi
done

if [[ -n "$C2RUST_DIR" ]]; then
    sed --in-place --regexp-extended "s|c2rust-bitfields = \"([0-9.]+)\"|c2rust-bitfields = { version = \"\1\", path = \"$C2RUST_DIR/c2rust-bitfields\" }|" "$SCRIPT_DIR/repo/Cargo.toml"
    sed --in-place --regexp-extended "s|c2rust-asm-casts = \"([0-9.]+)\"|c2rust-asm-casts = { version = \"\1\", path = \"$C2RUST_DIR/c2rust-asm-casts\" }|" "$SCRIPT_DIR/repo/Cargo.toml"
fi
"""

CARGO_SH: str = r"""#!/usr/bin/env bash
# this file was autogenerated by templates.py
set -e; set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0" )" && pwd)"

# Do a release build in case the C code contains signed integer overflows
# that trap in a debug build.
(cd "$SCRIPT_DIR/repo" \
    && RUSTFLAGS="-Awarnings {{extra_rustflags}}" nice -n 19 cargo ${TOOLCHAIN} build --release 2>&1 | tee ../`basename "$0"`.log)

"""

REFACTOR_SH: str = r"""#!/usr/bin/env bash
# this file was autogenerated by templates.py
set -e; set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0" )" && pwd)"

cd "$SCRIPT_DIR/repo"

LOG_FILE="../`basename "$0"`".log
rm -f "$LOG_FILE"
ARTIFACT_ROOT="../../refactor-diffs"
mkdir -p "$ARTIFACT_ROOT"
PROJECT_NAME="$(basename "$SCRIPT_DIR")"
ARTIFACT_DIR="${ARTIFACT_ROOT}/${PROJECT_NAME}"
rm -rf "$ARTIFACT_DIR"
mkdir -p "$ARTIFACT_DIR"

while IFS= read -r transform; do
    [[ -z "$transform" ]] && continue
    DIFF_FILE="$ARTIFACT_DIR/${transform}.diff"

    c2rust-refactor \
        ${transform} \
        --cargo --lib \
        --rewrite-mode diff \
        >"$DIFF_FILE" \
        2>>"$LOG_FILE"

    if [[ -s "$DIFF_FILE" ]] && grep -q '^@@' "$DIFF_FILE"; then
        echo "Saved diff for ${transform} at ${DIFF_FILE}" >>"$LOG_FILE"
        patch -p1 --batch <"$DIFF_FILE" >>"$LOG_FILE" 2>&1
    else
        echo "No changes produced by ${transform}; leaving empty diff ${DIFF_FILE}" >>"$LOG_FILE"
    fi
done <<'C2RUST_TRANSFORMS'
{{transform_lines}}
C2RUST_TRANSFORMS
"""


def render_script(template: str, out_path: str, params: Dict):
    out = Template(template).render(**params)

    with open(out_path, 'w') as fh:
        fh.writelines(out)
    os.chmod(out_path, stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC)


def autogen_cargo(conf_file, yaml: Dict):
    def render_stage(stage_conf: Mapping[str, Any] | None, filename: str) -> bool:
        if not isinstance(stage_conf, Mapping):
            return False
        if not stage_conf:
            return False

        ag = stage_conf.get("autogen")
        if not (ag and isinstance(ag, bool)):
            return False

        params: Dict[str, str] = {}
        rustflags = stage_conf.get("rustflags")
        if rustflags and isinstance(rustflags, str):
            params["extra_rustflags"] = rustflags

        out_path = os.path.join(
            os.path.dirname(conf_file),
            filename
        )
        render_script(CARGO_SH, out_path, params)
        return True

    for key, fname in (
        ("cargo.transpile", "cargo.transpile.gen.sh"),
        ("cargo.refactor", "cargo.refactor.gen.sh"),
    ):
        render_stage(yaml.get(key), fname)


def autogen_refactor(conf_file, yaml: Dict):
    refactor = yaml.get("refactor")
    if refactor and isinstance(refactor, Dict):
        ag = refactor.get("autogen")
        if ag and isinstance(ag, bool):
            params = {"transform_lines": ""}

            # Get list of transformations from config
            transforms = refactor.get("transforms")
            if transforms and isinstance(transforms, list):
                lines = [t.strip() for t in transforms if isinstance(t, str) and t.strip()]
                if lines:
                    params["transform_lines"] = "\n".join(lines)
            elif transforms and isinstance(transforms, str):
                stripped = transforms.strip()
                if stripped:
                    params["transform_lines"] = stripped

            # Only generate script if we have transformations
            if params["transform_lines"]:
                out_path = os.path.join(
                    os.path.dirname(conf_file),
                    "refactor.gen.sh"
                )
                render_script(REFACTOR_SH, out_path, params)


def autogen_transpile(conf_file, yaml: Dict):
    transpile = yaml.get("transpile")
    if transpile and isinstance(transpile, Dict):
        ag = transpile.get("autogen")
        if ag and isinstance(ag, bool):
            params = {"binary": "--emit-build-files", "cflags": ""}

            binary = transpile.get("binary")
            if binary:
                params["binary"] = f"--binary {binary}"

            cflags = transpile.get("cflags")
            if cflags:
                if isinstance(cflags, List):
                    cflags = " ".join(cflags)
                params["cflags"] = cflags

            tflags = transpile.get("tflags")
            if tflags:
                if isinstance(tflags, List):
                    tflags = " ".join(tflags)
                params["tflags"] = tflags


            out_path = os.path.join(
                os.path.dirname(conf_file),
                "transpile.gen.sh"
            )
            render_script(TRANSPILE_SH, out_path, params)


def autogen(conf: Config):
    for (cf, yaml) in conf.project_conf.items():
        autogen_transpile(cf, yaml)
        autogen_refactor(cf, yaml)
        autogen_cargo(cf, yaml)
